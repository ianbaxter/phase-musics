{"version":3,"sources":["components/App/App.js","serviceWorker.js","index.js"],"names":["App","useState","audioBuffer","setAudioBuffer","speed","setSpeed","loopStart","setLoopStart","loopEnd","setLoopEnd","ctx","AudioContext","startLoop","pan","rate","sourceNode","createBufferSource","pannerNode","createStereoPanner","buffer","loop","playbackRate","value","connect","destination","start","handleChange","e","target","name","maxLength","Math","round","duration","className","href","type","accept","onChange","file","files","indexOf","console","log","reader","FileReader","addEventListener","event","decodeAudioData","result","then","catch","error","readAsArrayBuffer","onClick","state","resume","disabled","orient","id","min","max","step","onInput","defaultValue","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d7db7681.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// import Audio from \"../../utils/audio\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [audioBuffer, setAudioBuffer] = useState(null);\n  const [speed, setSpeed] = useState(\"1.002\");\n  const [loopStart, setLoopStart] = useState(\"0\");\n  const [loopEnd, setLoopEnd] = useState(null);\n\n  const ctx = new AudioContext();\n\n  const fileUploaded = (e) => {\n    const file = e.target.files[0];\n\n    // Check if the file is audio.\n    if (file.type && file.type.indexOf(\"audio\") === -1) {\n      console.log(\"File is not audio.\", file.type, file);\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", (event) => {\n      ctx\n        .decodeAudioData(event.target.result)\n        .then((audioBuffer) => {\n          setAudioBuffer(audioBuffer);\n        })\n        .catch((e) => console.error(e));\n    });\n    reader.readAsArrayBuffer(file);\n  };\n\n  const start = () => {\n    if (ctx.state !== \"running\") {\n      ctx.resume();\n    }\n    startLoop(audioBuffer, -1, 1);\n    startLoop(audioBuffer, 1, speed);\n  };\n\n  const startLoop = (audioBuffer, pan, rate = 1) => {\n    const sourceNode = ctx.createBufferSource();\n    const pannerNode = ctx.createStereoPanner();\n\n    sourceNode.buffer = audioBuffer;\n    sourceNode.loop = true;\n    sourceNode.loopStart = loopStart;\n    sourceNode.loopEnd = loopEnd;\n    sourceNode.playbackRate.value = rate;\n    pannerNode.pan.value = pan;\n\n    sourceNode.connect(pannerNode);\n    pannerNode.connect(ctx.destination);\n    sourceNode.start(0, loopStart);\n  };\n\n  const handleChange = (e) => {\n    const value = e.target.value;\n    switch (e.target.name) {\n      case \"speed\":\n        // console.log(\"speed: \" + value);\n        setSpeed(value);\n        break;\n      case \"loop-start\":\n        // console.log(\"start: \" + value);\n        setLoopStart(value);\n        break;\n      case \"loop-end\":\n        // console.log(\"end: \" + value);\n        setLoopEnd(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  let maxLength = 0;\n  if (audioBuffer) {\n    maxLength = Math.round(audioBuffer.duration * 10) / 10;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Phase Musics</h1>\n      <p>\n        Load a short .mp3 or .wav file. <br />\n        Set the loop positions and speed difference. <br />\n        Listen to the sample phase between itself. <br />\n        Inspired by{\" \"}\n        <a href=\"https://teropa.info/blog/2016/07/28/javascript-systems-music.html\">\n          this article\n        </a>{\" \"}\n        and Steve Reich. <br />\n        Refresh page to reset.\n      </p>\n      <div className=\"card\">\n        <input type=\"file\" accept=\".wav, .mp3, .ogg\" onChange={fileUploaded} />\n        <button onClick={start} disabled={audioBuffer === null}>\n          Start\n        </button>\n        {audioBuffer && (\n          <div className=\"controls\">\n            <div className=\"control\">\n              <input\n                type=\"range\"\n                orient=\"vertical\"\n                id=\"loop-start\"\n                name=\"loop-start\"\n                min=\"0\"\n                max={maxLength}\n                step=\"1\"\n                onInput={handleChange}\n                defaultValue=\"0\"\n              />\n              <label htmlFor=\"loop-start\">Loop Start</label>\n            </div>\n            <div className=\"control\">\n              <input\n                type=\"range\"\n                orient=\"vertical\"\n                id=\"loop-end\"\n                name=\"loop-end\"\n                min=\"0\"\n                max={maxLength}\n                step=\"1\"\n                onInput={handleChange}\n                defaultValue={maxLength}\n              />\n              <label htmlFor=\"loop-start\">Loop End</label>\n            </div>\n            <div className=\"control\">\n              <input\n                type=\"range\"\n                orient=\"vertical\"\n                id=\"speed\"\n                name=\"speed\"\n                min=\"1.001\"\n                max=\"1.01\"\n                step=\"0.001\"\n                onInput={handleChange}\n                defaultValue=\"1.002\"\n              />\n              <label htmlFor=\"speed\">Speed</label>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}